name: CI/CD Pipeline

on:
  pull_request:
    branches: [ "main", "development" ]

env:
  STAGE: test
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432
  TEST_DATABASE_HOST: localhost
  TEST_REDIS_HOST: localhost
  REDIS_HOST: localhost
  REDIS_PORT: 6379
  REDIS_DB: 0
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  ALGORITHM: ${{ secrets.ALGORITHM }}
  ADMIN_LOGIN: ${{ secrets.ADMIN_LOGIN }}

jobs:
  full-check:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432

      redis:
        image: redis:alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Load cached Poetry installation
      id: cached-poetry
      uses: actions/cache@v3
      with:
        path: ~/.local
        key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Poetry
      if: steps.cached-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Wait for services
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

        until pg_isready -h localhost -p 5432 -U ${{ secrets.POSTGRES_USER }}; do
          echo "Waiting for PostgreSQL..."
          sleep 3
        done

        sleep 5
        echo "PostgreSQL is ready!"

    - name: Run all checks (Ruff + MyPy + Bandit + Tests)
      run: nox -s all