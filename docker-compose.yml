services:
  db:
    image: postgres:15.4-alpine
    container_name: slavbor_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  test_db:
    image: postgres:15.4-alpine
    container_name: slavbor_test_db
    restart: "no"
    environment:
      POSTGRES_USER: slavbor_user
      POSTGRES_PASSWORD: test_secret
      POSTGRES_DB: slavbor_test_db
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - app_network

  pgadmin:
    image: dpage/pgadmin4:7.6
    container_name: slavbor_pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - app_network

  redis:
    image: redis:7.2.3-alpine
    container_name: slavbor_redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  test_redis:
    image: redis:7.2.3-alpine
    container_name: slavbor_test_redis
    restart: "no"
    ports:
      - "6381:6379"
    volumes:
      - test_redis_data:/data
    networks:
      - app_network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: slavbor_fastapi_app
    restart: unless-stopped
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/api/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  test_postgres_data:
  pgadmin_data:
  redis_data:
  test_redis_data:

networks:
  app_network:
    driver: bridge
