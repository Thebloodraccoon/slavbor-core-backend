"""Initial migration

Revision ID: 3c77983469e3
Revises:
Create Date: 2025-06-11 06:49:46.619490

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "3c77983469e3"
down_revision: Union[str, None] = "0001_install_extensions"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "races",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("size", sa.String(length=20), nullable=True),
        sa.Column("racial_abilities", sa.ARRAY(sa.Text()), nullable=True),
        sa.Column(
            "stat_bonuses", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("languages", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("special_traits", sa.Text(), nullable=True),
        sa.Column("average_height", sa.String(length=50), nullable=True),
        sa.Column("average_weight", sa.String(length=50), nullable=True),
        sa.Column("physical_features", sa.Text(), nullable=True),
        sa.Column("is_playable", sa.Boolean(), nullable=True),
        sa.Column("rarity", sa.String(length=20), nullable=True),
        sa.Column("homeland_regions", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.CheckConstraint(
            "rarity IS NULL OR rarity IN (\n                'очень_редкая', 'редкая', 'необычная', 'обычная', 'распространенная'\n            )",
            name="check_race_rarity",
        ),
        sa.CheckConstraint(
            "size IN ('Крошечный', 'Маленький', 'Средний', 'Большой', 'Огромный', 'Гигантский')",
            name="check_race_size",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_race_abilities",
        "races",
        ["racial_abilities"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_race_languages",
        "races",
        ["languages"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_race_name_trgm",
        "races",
        ["name"],
        unique=False,
        postgresql_using="gin",
        postgresql_ops={"name": "gin_trgm_ops"},
    )
    op.create_index(
        "idx_race_playable_size", "races", ["is_playable", "size"], unique=False
    )
    op.create_index(
        "idx_race_regions",
        "races",
        ["homeland_regions"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_race_stat_bonuses",
        "races",
        ["stat_bonuses"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_races_is_playable"), "races", ["is_playable"], unique=False
    )
    op.create_index(op.f("ix_races_name"), "races", ["name"], unique=True)
    op.create_index(op.f("ix_races_rarity"), "races", ["rarity"], unique=False)
    op.create_index(op.f("ix_races_size"), "races", ["size"], unique=False)
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=False),
        sa.Column("role", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("last_login", sa.DateTime(), nullable=True),
        sa.CheckConstraint(
            "role IN ('found_father', 'keeper', 'player')", name="check_user_role"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("username"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_table(
        "characters",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=200), nullable=False),
        sa.Column("type", sa.String(length=20), nullable=False),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("player_user_id", sa.Integer(), nullable=True),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.Column("full_name", sa.String(length=400), nullable=True),
        sa.Column("titles", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("epithets", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("race_id", sa.Integer(), nullable=True),
        sa.Column("current_location_name", sa.String(length=100), nullable=True),
        sa.Column("birth_location_name", sa.String(length=100), nullable=True),
        sa.Column("primary_faction_name", sa.String(length=100), nullable=True),
        sa.Column("biography", sa.Text(), nullable=True),
        sa.Column("personality_traits", sa.Text(), nullable=True),
        sa.Column("birth_year", sa.Integer(), nullable=True),
        sa.Column("death_year", sa.Integer(), nullable=True),
        sa.Column("level", sa.Integer(), nullable=True),
        sa.Column("strength", sa.Integer(), nullable=True),
        sa.Column("dexterity", sa.Integer(), nullable=True),
        sa.Column("constitution", sa.Integer(), nullable=True),
        sa.Column("intelligence", sa.Integer(), nullable=True),
        sa.Column("wisdom", sa.Integer(), nullable=True),
        sa.Column("charisma", sa.Integer(), nullable=True),
        sa.Column("social_rank", sa.String(length=50), nullable=True),
        sa.Column("wealth_level", sa.String(length=30), nullable=True),
        sa.Column("father_name", sa.String(length=200), nullable=True),
        sa.Column("mother_name", sa.String(length=200), nullable=True),
        sa.Column("secondary_factions", sa.ARRAY(sa.Integer()), nullable=True),
        sa.Column(
            "faction_roles", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("faction_status", sa.String(length=20), nullable=True),
        sa.Column("campaign_id", sa.Integer(), nullable=True),
        sa.Column("player_id", sa.Integer(), nullable=True),
        sa.Column("dm_notes", sa.Text(), nullable=True),
        sa.Column("player_notes", sa.Text(), nullable=True),
        sa.CheckConstraint(
            "social_rank IS NULL OR social_rank IN (\n                'император', 'король', 'князь', 'герцог', 'граф', 'боярин', \n                'рыцарь', 'дворянин', 'торговец', 'ремесленник', 'крестьянин', 'раб'\n            )",
            name="check_social_rank",
        ),
        sa.CheckConstraint(
            "status IN ('alive', 'dead', 'missing', 'legendary', 'unknown')",
            name="check_character_status",
        ),
        sa.CheckConstraint(
            "type IN ('npc', 'player', 'historical', 'deity', 'legendary', 'template')",
            name="check_character_type",
        ),
        sa.CheckConstraint(
            "wealth_level IS NULL OR wealth_level IN (\n                'нищий', 'бедный', 'средний', 'богатый', 'очень_богатый'\n            )",
            name="check_wealth_level",
        ),
        sa.CheckConstraint(
            "birth_year IS NULL OR birth_year > 0", name="check_birth_year"
        ),
        sa.CheckConstraint(
            "charisma IS NULL OR (charisma >= 1 AND charisma <= 30)",
            name="check_charisma_range",
        ),
        sa.CheckConstraint(
            "constitution IS NULL OR (constitution >= 1 AND constitution <= 30)",
            name="check_constitution_range",
        ),
        sa.CheckConstraint(
            "death_year IS NULL OR birth_year IS NULL OR death_year >= birth_year",
            name="check_death_after_birth",
        ),
        sa.CheckConstraint(
            "death_year IS NULL OR death_year > 0", name="check_death_year"
        ),
        sa.CheckConstraint(
            "dexterity IS NULL OR (dexterity >= 1 AND dexterity <= 30)",
            name="check_dexterity_range",
        ),
        sa.CheckConstraint(
            "intelligence IS NULL OR (intelligence >= 1 AND intelligence <= 30)",
            name="check_intelligence_range",
        ),
        sa.CheckConstraint(
            "level IS NULL OR (level >= 1 AND level <= 30)", name="check_level_range"
        ),
        sa.CheckConstraint(
            "strength IS NULL OR (strength >= 1 AND strength <= 30)",
            name="check_strength_range",
        ),
        sa.CheckConstraint(
            "wisdom IS NULL OR (wisdom >= 1 AND wisdom <= 30)",
            name="check_wisdom_range",
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["player_user_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["race_id"],
            ["races.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_character_created_by",
        "characters",
        ["created_by_user_id", "created_at"],
        unique=False,
    )
    op.create_index(
        "idx_character_faction_roles",
        "characters",
        ["faction_roles"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_character_name_trgm",
        "characters",
        ["name"],
        unique=False,
        postgresql_using="gin",
        postgresql_ops={"name": "gin_trgm_ops"},
    )
    op.create_index(
        "idx_character_player_user",
        "characters",
        ["player_user_id", "type"],
        unique=False,
    )
    op.create_index(
        "idx_character_secondary_factions",
        "characters",
        ["secondary_factions"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_character_type_status", "characters", ["type", "status"], unique=False
    )
    op.create_index(
        op.f("ix_characters_birth_location_name"),
        "characters",
        ["birth_location_name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_characters_birth_year"), "characters", ["birth_year"], unique=False
    )
    op.create_index(
        op.f("ix_characters_campaign_id"), "characters", ["campaign_id"], unique=False
    )
    op.create_index(
        op.f("ix_characters_created_by_user_id"),
        "characters",
        ["created_by_user_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_characters_current_location_name"),
        "characters",
        ["current_location_name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_characters_death_year"), "characters", ["death_year"], unique=False
    )
    op.create_index(
        op.f("ix_characters_father_name"), "characters", ["father_name"], unique=False
    )
    op.create_index(
        op.f("ix_characters_full_name"), "characters", ["full_name"], unique=False
    )
    op.create_index(
        op.f("ix_characters_mother_name"), "characters", ["mother_name"], unique=False
    )
    op.create_index(op.f("ix_characters_name"), "characters", ["name"], unique=False)
    op.create_index(
        op.f("ix_characters_player_id"), "characters", ["player_id"], unique=False
    )
    op.create_index(
        op.f("ix_characters_player_user_id"),
        "characters",
        ["player_user_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_characters_primary_faction_name"),
        "characters",
        ["primary_faction_name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_characters_race_id"), "characters", ["race_id"], unique=False
    )
    op.create_index(
        op.f("ix_characters_social_rank"), "characters", ["social_rank"], unique=False
    )
    op.create_index(
        op.f("ix_characters_status"), "characters", ["status"], unique=False
    )
    op.create_index(op.f("ix_characters_type"), "characters", ["type"], unique=False)
    op.create_index(
        op.f("ix_characters_wealth_level"), "characters", ["wealth_level"], unique=False
    )
    op.create_table(
        "factions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("type", sa.String(length=50), nullable=False),
        sa.Column("full_name", sa.String(length=200), nullable=True),
        sa.Column("alternative_names", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("dynastic_title", sa.String(length=100), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("parent_faction_id", sa.Integer(), nullable=True),
        sa.Column("faction_branch", sa.String(length=100), nullable=True),
        sa.Column("primary_territory", sa.String(length=100), nullable=True),
        sa.Column("controlled_cities", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("controlled_regions", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("trade_routes_controlled", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("government_structure", sa.String(length=50), nullable=True),
        sa.Column("leadership_type", sa.String(length=30), nullable=True),
        sa.Column("current_leader_name", sa.String(length=200), nullable=True),
        sa.Column("succession_rules", sa.Text(), nullable=True),
        sa.Column("status", sa.String(length=30), nullable=True),
        sa.Column("founded_year", sa.Integer(), nullable=True),
        sa.Column("peak_power_period", sa.String(length=100), nullable=True),
        sa.Column("decline_started_year", sa.Integer(), nullable=True),
        sa.Column("fallen_year", sa.Integer(), nullable=True),
        sa.Column("traditional_allies", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("traditional_enemies", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("current_allies", sa.ARRAY(sa.Integer()), nullable=True),
        sa.Column("current_enemies", sa.ARRAY(sa.Integer()), nullable=True),
        sa.Column(
            "diplomatic_status", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("military_strength", sa.String(length=20), nullable=True),
        sa.Column("economic_power", sa.String(length=20), nullable=True),
        sa.Column("political_influence", sa.String(length=20), nullable=True),
        sa.Column("territorial_control", sa.String(length=20), nullable=True),
        sa.Column("wealth_level", sa.String(length=30), nullable=True),
        sa.Column("primary_income_sources", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("trade_specialization", sa.ARRAY(sa.String()), nullable=True),
        sa.Column(
            "economic_assets", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "military_assets", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("military_specialization", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("famous_military_units", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("dominant_culture", sa.String(length=50), nullable=True),
        sa.Column("primary_religion", sa.String(length=50), nullable=True),
        sa.Column("cultural_practices", sa.Text(), nullable=True),
        sa.Column("symbols_and_heraldry", sa.Text(), nullable=True),
        sa.Column("historical_importance", sa.String(length=20), nullable=True),
        sa.Column("major_achievements", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("major_conflicts", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("historical_events", sa.ARRAY(sa.String()), nullable=True),
        sa.Column(
            "internal_structure", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("key_positions", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("membership_requirements", sa.Text(), nullable=True),
        sa.Column("internal_politics", sa.Text(), nullable=True),
        sa.Column("cultural_contributions", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("legal_legacy", sa.Text(), nullable=True),
        sa.Column("architectural_legacy", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("current_goals", sa.Text(), nullable=True),
        sa.Column("current_conflicts", sa.Text(), nullable=True),
        sa.Column("current_projects", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("created_by_user_id", sa.Integer(), nullable=True),
        sa.Column("source_material", sa.String(length=100), nullable=True),
        sa.CheckConstraint(
            "economic_power IS NULL OR economic_power IN (\n                'отсутствует', 'минимальная', 'слабая', 'средняя', 'сильная', 'очень_сильная', 'доминирующая'\n            )",
            name="check_economic_power",
        ),
        sa.CheckConstraint(
            "historical_importance IS NULL OR historical_importance IN (\n                'незначительная', 'местная', 'региональная', 'национальная', 'международная', 'легендарная'\n            )",
            name="check_historical_importance",
        ),
        sa.CheckConstraint(
            "leadership_type IS NULL OR leadership_type IN (\n                'наследственная', 'выборная', 'военная', 'теократическая', \n                'олигархическая', 'диктаторская', 'коллективная'\n            )",
            name="check_leadership_type",
        ),
        sa.CheckConstraint(
            "military_strength IS NULL OR military_strength IN (\n                'отсутствует', 'минимальная', 'слабая', 'средняя', 'сильная', 'очень_сильная', 'доминирующая'\n            )",
            name="check_military_strength",
        ),
        sa.CheckConstraint(
            "political_influence IS NULL OR political_influence IN (\n                'отсутствует', 'минимальная', 'слабая', 'средняя', 'сильная', 'очень_сильная', 'доминирующая'\n            )",
            name="check_political_influence",
        ),
        sa.CheckConstraint(
            "status IN (\n                'зарождающаяся', 'растущая', 'активная', 'могущественная', 'доминирующая',\n                'стабильная', 'в_упадке', 'ослабленная', 'разрушающаяся', \n                'разрушенная', 'историческая', 'легендарная'\n            )",
            name="check_faction_status",
        ),
        sa.CheckConstraint(
            "type IN (\n                'торговая_династия', 'военный_клан', 'религиозная_группа', 'дворянский_род',\n                'торговая_гильдия', 'ремесленная_гильдия', 'военный_орден', 'рыцарский_орден',\n                'княжеский_дом', 'королевская_династия', 'императорский_дом',\n                'племенной_союз', 'городское_правительство', 'республика',\n                'тайное_общество', 'культ', 'секта', 'братство',\n                'пиратская_флотилия', 'разбойничья_банда', 'наемная_компания'\n            )",
            name="check_faction_type",
        ),
        sa.CheckConstraint(
            "wealth_level IS NULL OR wealth_level IN (\n                'нищая', 'бедная', 'скромная', 'средняя', 'богатая', 'очень_богатая', 'баснословно_богатая'\n            )",
            name="check_wealth_level",
        ),
        sa.CheckConstraint(
            "decline_started_year IS NULL OR decline_started_year > 0",
            name="check_decline_year_positive",
        ),
        sa.CheckConstraint(
            "decline_started_year IS NULL OR founded_year IS NULL OR decline_started_year >= founded_year",
            name="check_decline_after_founding",
        ),
        sa.CheckConstraint(
            "fallen_year IS NULL OR fallen_year > 0", name="check_fallen_year_positive"
        ),
        sa.CheckConstraint(
            "fallen_year IS NULL OR founded_year IS NULL OR fallen_year >= founded_year",
            name="check_fall_after_founding",
        ),
        sa.CheckConstraint(
            "founded_year IS NULL OR founded_year > 0",
            name="check_founded_year_positive",
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["parent_faction_id"],
            ["factions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_faction_achievements",
        "factions",
        ["major_achievements"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_faction_allies",
        "factions",
        ["traditional_allies"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_faction_cities",
        "factions",
        ["controlled_cities"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_faction_conflicts",
        "factions",
        ["major_conflicts"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_faction_current_allies",
        "factions",
        ["current_allies"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_faction_current_enemies",
        "factions",
        ["current_enemies"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_faction_description_fts",
        "factions",
        ["description"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_faction_diplomacy",
        "factions",
        ["diplomatic_status"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_faction_economic_assets",
        "factions",
        ["economic_assets"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_faction_enemies",
        "factions",
        ["traditional_enemies"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_faction_hierarchy", "factions", ["parent_faction_id", "type"], unique=False
    )
    op.create_index(
        "idx_faction_historical",
        "factions",
        ["founded_year", "historical_importance"],
        unique=False,
    )
    op.create_index(
        "idx_faction_income_sources",
        "factions",
        ["primary_income_sources"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_faction_military_assets",
        "factions",
        ["military_assets"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_faction_name_trgm",
        "factions",
        ["name"],
        unique=False,
        postgresql_using="gin",
        postgresql_ops={"name": "gin_trgm_ops"},
    )
    op.create_index(
        "idx_faction_power_analysis",
        "factions",
        ["military_strength", "economic_power", "political_influence"],
        unique=False,
    )
    op.create_index(
        "idx_faction_regions",
        "factions",
        ["controlled_regions"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_faction_structure",
        "factions",
        ["internal_structure"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_faction_territorial",
        "factions",
        ["primary_territory", "status"],
        unique=False,
    )
    op.create_index(
        "idx_faction_trade_routes",
        "factions",
        ["trade_routes_controlled"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_faction_trade_spec",
        "factions",
        ["trade_specialization"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_faction_type_status", "factions", ["type", "status"], unique=False
    )
    op.create_index(
        op.f("ix_factions_created_by_user_id"),
        "factions",
        ["created_by_user_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_factions_current_leader_name"),
        "factions",
        ["current_leader_name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_factions_economic_power"), "factions", ["economic_power"], unique=False
    )
    op.create_index(
        op.f("ix_factions_founded_year"), "factions", ["founded_year"], unique=False
    )
    op.create_index(
        op.f("ix_factions_full_name"), "factions", ["full_name"], unique=False
    )
    op.create_index(
        op.f("ix_factions_historical_importance"),
        "factions",
        ["historical_importance"],
        unique=False,
    )
    op.create_index(
        op.f("ix_factions_leadership_type"),
        "factions",
        ["leadership_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_factions_military_strength"),
        "factions",
        ["military_strength"],
        unique=False,
    )
    op.create_index(op.f("ix_factions_name"), "factions", ["name"], unique=False)
    op.create_index(
        op.f("ix_factions_parent_faction_id"),
        "factions",
        ["parent_faction_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_factions_political_influence"),
        "factions",
        ["political_influence"],
        unique=False,
    )
    op.create_index(
        op.f("ix_factions_primary_territory"),
        "factions",
        ["primary_territory"],
        unique=False,
    )
    op.create_index(op.f("ix_factions_status"), "factions", ["status"], unique=False)
    op.create_index(op.f("ix_factions_type"), "factions", ["type"], unique=False)
    op.create_index(
        op.f("ix_factions_wealth_level"), "factions", ["wealth_level"], unique=False
    )
    op.create_table(
        "locations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("type", sa.String(length=30), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("created_by_user_id", sa.Integer(), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("alternative_names", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("parent_location_id", sa.Integer(), nullable=True),
        sa.Column("region", sa.String(length=50), nullable=True),
        sa.Column("climate", sa.String(length=30), nullable=True),
        sa.Column("terrain", sa.String(length=30), nullable=True),
        sa.Column("elevation", sa.Integer(), nullable=True),
        sa.Column("population", sa.Integer(), nullable=True),
        sa.Column(
            "population_composition",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("government_type", sa.String(length=50), nullable=True),
        sa.Column("current_ruler_name", sa.String(length=200), nullable=True),
        sa.Column("controlling_faction_name", sa.String(length=100), nullable=True),
        sa.Column("political_status", sa.String(length=30), nullable=True),
        sa.Column("wealth_level", sa.String(length=20), nullable=True),
        sa.Column("main_trade_goods", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("natural_resources", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("trade_routes", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("fortification_level", sa.String(length=20), nullable=True),
        sa.Column("strategic_importance", sa.String(length=20), nullable=True),
        sa.Column("garrison_size", sa.Integer(), nullable=True),
        sa.Column("founded_year", sa.Integer(), nullable=True),
        sa.Column("historical_periods", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("major_events", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("dominant_culture", sa.String(length=50), nullable=True),
        sa.Column("languages_spoken", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("religious_sites", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("cultural_landmarks", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("notable_features", sa.Text(), nullable=True),
        sa.Column("infrastructure_level", sa.String(length=20), nullable=True),
        sa.Column("notable_buildings", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("map_x", sa.Integer(), nullable=True),
        sa.Column("map_y", sa.Integer(), nullable=True),
        sa.Column("accessible_by", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("connected_locations", sa.ARRAY(sa.Integer()), nullable=True),
        sa.Column("travel_restrictions", sa.Text(), nullable=True),
        sa.Column("current_status", sa.String(length=20), nullable=True),
        sa.Column("habitability", sa.String(length=20), nullable=True),
        sa.Column("danger_level", sa.String(length=20), nullable=True),
        sa.Column("seasonal_changes", sa.Text(), nullable=True),
        sa.Column("special_events", sa.ARRAY(sa.String()), nullable=True),
        sa.CheckConstraint(
            "current_status IN (\n                'процветающая', 'активная', 'стабильная', 'в_упадке', 'заброшенная', 'руины', 'разрушенная'\n            )",
            name="check_current_status",
        ),
        sa.CheckConstraint(
            "danger_level IS NULL OR danger_level IN (\n                'очень_безопасная', 'безопасная', 'относительно_безопасная', 'опасная', 'очень_опасная', 'смертельная'\n            )",
            name="check_danger_level",
        ),
        sa.CheckConstraint(
            "fortification_level IS NULL OR fortification_level IN (\n                'открытая', 'частично_укрепленная', 'укрепленная', 'крепость', 'неприступная_крепость'\n            )",
            name="check_fortification_level",
        ),
        sa.CheckConstraint(
            "strategic_importance IS NULL OR strategic_importance IN (\n                'незначительная', 'низкая', 'средняя', 'высокая', 'критическая'\n            )",
            name="check_strategic_importance",
        ),
        sa.CheckConstraint(
            "type IN (\n                'континент', 'страна', 'регион', 'княжество', 'провинция',\n                'город', 'столица', 'деревня', 'поселок', 'хутор',\n                'крепость', 'замок', 'форт', 'застава',\n                'храм', 'монастырь', 'святилище',\n                'руины', 'развалины', 'древний_город',\n                'порт', 'пристань', 'переправа',\n                'дорога', 'торговый_путь', 'перевал',\n                'лес', 'роща', 'болото', 'пустыня', 'горы',\n                'река', 'озеро', 'море', 'залив'\n            )",
            name="check_location_type",
        ),
        sa.CheckConstraint(
            "wealth_level IS NULL OR wealth_level IN (\n                'нищая', 'бедная', 'скромная', 'средняя', 'богатая', 'очень_богатая', 'баснословно_богатая'\n            )",
            name="check_wealth_level",
        ),
        sa.CheckConstraint(
            "founded_year IS NULL OR founded_year > 0",
            name="check_founded_year_positive",
        ),
        sa.CheckConstraint(
            "garrison_size IS NULL OR garrison_size >= 0",
            name="check_garrison_positive",
        ),
        sa.CheckConstraint(
            "population IS NULL OR population >= 0", name="check_population_positive"
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["parent_location_id"],
            ["locations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_location_coordinates", "locations", ["map_x", "map_y"], unique=False
    )
    op.create_index(
        "idx_location_description_fts",
        "locations",
        ["description"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_location_events",
        "locations",
        ["major_events"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_location_landmarks",
        "locations",
        ["cultural_landmarks"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_location_languages",
        "locations",
        ["languages_spoken"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_location_name_trgm",
        "locations",
        ["name"],
        unique=False,
        postgresql_using="gin",
        postgresql_ops={"name": "gin_trgm_ops"},
    )
    op.create_index(
        "idx_location_resources",
        "locations",
        ["natural_resources"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_location_routes",
        "locations",
        ["trade_routes"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_location_strategic_military",
        "locations",
        ["strategic_importance", "fortification_level"],
        unique=False,
    )
    op.create_index(
        "idx_location_trade_goods",
        "locations",
        ["main_trade_goods"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_location_type_region", "locations", ["type", "region"], unique=False
    )
    op.create_index(
        "idx_location_wealth_population",
        "locations",
        ["wealth_level", "population"],
        unique=False,
    )
    op.create_index(
        op.f("ix_locations_climate"), "locations", ["climate"], unique=False
    )
    op.create_index(
        op.f("ix_locations_controlling_faction_name"),
        "locations",
        ["controlling_faction_name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_locations_created_by_user_id"),
        "locations",
        ["created_by_user_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_locations_current_ruler_name"),
        "locations",
        ["current_ruler_name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_locations_current_status"),
        "locations",
        ["current_status"],
        unique=False,
    )
    op.create_index(
        op.f("ix_locations_danger_level"), "locations", ["danger_level"], unique=False
    )
    op.create_index(
        op.f("ix_locations_fortification_level"),
        "locations",
        ["fortification_level"],
        unique=False,
    )
    op.create_index(
        op.f("ix_locations_founded_year"), "locations", ["founded_year"], unique=False
    )
    op.create_index(
        op.f("ix_locations_government_type"),
        "locations",
        ["government_type"],
        unique=False,
    )
    op.create_index(op.f("ix_locations_map_x"), "locations", ["map_x"], unique=False)
    op.create_index(op.f("ix_locations_map_y"), "locations", ["map_y"], unique=False)
    op.create_index(op.f("ix_locations_name"), "locations", ["name"], unique=False)
    op.create_index(
        op.f("ix_locations_parent_location_id"),
        "locations",
        ["parent_location_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_locations_population"), "locations", ["population"], unique=False
    )
    op.create_index(op.f("ix_locations_region"), "locations", ["region"], unique=False)
    op.create_index(
        op.f("ix_locations_strategic_importance"),
        "locations",
        ["strategic_importance"],
        unique=False,
    )
    op.create_index(op.f("ix_locations_type"), "locations", ["type"], unique=False)
    op.create_index(
        op.f("ix_locations_wealth_level"), "locations", ["wealth_level"], unique=False
    )
    op.create_table(
        "articles",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(length=300), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("article_type", sa.String(length=50), nullable=False),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("last_modified_by_user_id", sa.Integer(), nullable=True),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.Column("subtitle", sa.String(length=500), nullable=True),
        sa.Column("summary", sa.Text(), nullable=True),
        sa.Column("tags", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("category", sa.String(length=50), nullable=True),
        sa.Column("subcategory", sa.String(length=50), nullable=True),
        sa.Column("topic", sa.String(length=100), nullable=True),
        sa.Column("historical_period", sa.String(length=100), nullable=True),
        sa.Column("primary_character_id", sa.Integer(), nullable=True),
        sa.Column("primary_location_id", sa.Integer(), nullable=True),
        sa.Column("primary_faction_id", sa.Integer(), nullable=True),
        sa.Column("primary_race_id", sa.Integer(), nullable=True),
        sa.Column("related_characters", sa.ARRAY(sa.Integer()), nullable=True),
        sa.Column("related_locations", sa.ARRAY(sa.Integer()), nullable=True),
        sa.Column("related_factions", sa.ARRAY(sa.Integer()), nullable=True),
        sa.Column("related_races", sa.ARRAY(sa.Integer()), nullable=True),
        sa.Column("geographic_scope", sa.String(length=100), nullable=True),
        sa.Column("time_period_start", sa.Integer(), nullable=True),
        sa.Column("time_period_end", sa.Integer(), nullable=True),
        sa.Column("in_world_date", sa.String(length=100), nullable=True),
        sa.Column("word_count", sa.Integer(), nullable=True),
        sa.Column("reading_time_minutes", sa.Integer(), nullable=True),
        sa.Column("difficulty_level", sa.String(length=20), nullable=True),
        sa.Column("source_type", sa.String(length=30), nullable=True),
        sa.Column("source_documents", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("canonical_status", sa.String(length=20), nullable=True),
        sa.Column("reliability_level", sa.String(length=20), nullable=True),
        sa.Column("is_published", sa.Boolean(), nullable=True),
        sa.Column("is_public", sa.Boolean(), nullable=True),
        sa.Column("publication_date", sa.DateTime(), nullable=True),
        sa.Column("visibility_level", sa.String(length=20), nullable=True),
        sa.Column("has_images", sa.Boolean(), nullable=True),
        sa.Column("has_maps", sa.Boolean(), nullable=True),
        sa.Column("has_timelines", sa.Boolean(), nullable=True),
        sa.Column("has_character_sheets", sa.Boolean(), nullable=True),
        sa.Column("languages_mentioned", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("cultural_context", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("religious_context", sa.ARRAY(sa.String()), nullable=True),
        sa.CheckConstraint(
            "article_type IN (\n                'персонаж', 'локация', 'фракция', 'раса', 'событие', 'легенда', \n                'история', 'культура', 'религия', 'политика', 'экономика',\n                'военное_дело', 'магия', 'технология', 'язык', 'обычаи',\n                'артефакт', 'организация', 'правила', 'хроника', 'биография',\n                'географический_справочник', 'исторический_документ', 'законы',\n                'торговые_пути', 'генеалогия', 'справочник'\n            )",
            name="check_article_type",
        ),
        sa.CheckConstraint(
            "canonical_status IN ('canon', 'semi_canon', 'non_canon', 'alternative', 'disputed')",
            name="check_canonical_status",
        ),
        sa.CheckConstraint(
            "category IS NULL OR category IN (\n                'персонажи', 'география', 'история', 'политика', 'культура', \n                'религия', 'экономика', 'военное_дело', 'магия', 'расы',\n                'фракции', 'технологии', 'языки', 'обычаи', 'артефакты',\n                'справочники', 'правила_игры'\n            )",
            name="check_article_category",
        ),
        sa.CheckConstraint(
            "difficulty_level IN ('beginner', 'easy', 'medium', 'hard', 'expert')",
            name="check_difficulty_level",
        ),
        sa.CheckConstraint(
            "reliability_level IS NULL OR reliability_level IN (\n                'verified', 'reliable', 'mostly_reliable', 'questionable', 'unreliable', 'fictional'\n            )",
            name="check_reliability_level",
        ),
        sa.CheckConstraint(
            "source_type IN (\n                'original', 'translated', 'adapted', 'compiled', 'referenced', 'player_created'\n            )",
            name="check_source_type",
        ),
        sa.CheckConstraint(
            "status IN ('draft', 'review', 'published', 'archived', 'deleted')",
            name="check_article_status",
        ),
        sa.CheckConstraint(
            "visibility_level IN ('public', 'players_only', 'gm_only', 'private')",
            name="check_visibility_level",
        ),
        sa.CheckConstraint(
            "reading_time_minutes IS NULL OR reading_time_minutes >= 0",
            name="check_reading_time_positive",
        ),
        sa.CheckConstraint(
            "time_period_end IS NULL OR time_period_end > 0",
            name="check_end_period_positive",
        ),
        sa.CheckConstraint(
            "time_period_end IS NULL OR time_period_start IS NULL OR time_period_end >= time_period_start",
            name="check_period_chronology",
        ),
        sa.CheckConstraint(
            "time_period_start IS NULL OR time_period_start > 0",
            name="check_start_period_positive",
        ),
        sa.CheckConstraint(
            "word_count IS NULL OR word_count >= 0", name="check_word_count_positive"
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["last_modified_by_user_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["primary_character_id"],
            ["characters.id"],
        ),
        sa.ForeignKeyConstraint(
            ["primary_faction_id"],
            ["factions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["primary_location_id"],
            ["locations.id"],
        ),
        sa.ForeignKeyConstraint(
            ["primary_race_id"],
            ["races.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_article_category_published",
        "articles",
        ["category", "is_published"],
        unique=False,
    )
    op.create_index(
        "idx_article_content_fts",
        "articles",
        ["content"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_article_created_by",
        "articles",
        ["created_by_user_id", "created_at"],
        unique=False,
    )
    op.create_index(
        "idx_article_cultural_context",
        "articles",
        ["cultural_context"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_article_languages",
        "articles",
        ["languages_mentioned"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_article_last_modified_by",
        "articles",
        ["last_modified_by_user_id", "updated_at"],
        unique=False,
    )
    op.create_index(
        "idx_article_period",
        "articles",
        ["historical_period", "time_period_start", "time_period_end"],
        unique=False,
    )
    op.create_index(
        "idx_article_publication",
        "articles",
        ["is_published", "publication_date"],
        unique=False,
    )
    op.create_index(
        "idx_article_related_chars",
        "articles",
        ["related_characters"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_article_related_factions",
        "articles",
        ["related_factions"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_article_related_locs",
        "articles",
        ["related_locations"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_article_related_races",
        "articles",
        ["related_races"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_article_religious_context",
        "articles",
        ["religious_context"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_article_sources",
        "articles",
        ["source_documents"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_article_summary_fts",
        "articles",
        ["summary"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_article_tags", "articles", ["tags"], unique=False, postgresql_using="gin"
    )
    op.create_index(
        "idx_article_title_trgm",
        "articles",
        ["title"],
        unique=False,
        postgresql_using="gin",
        postgresql_ops={"title": "gin_trgm_ops"},
    )
    op.create_index(
        "idx_article_type_status", "articles", ["article_type", "status"], unique=False
    )
    op.create_index(
        "idx_article_visibility",
        "articles",
        ["visibility_level", "is_public"],
        unique=False,
    )
    op.create_index(
        op.f("ix_articles_article_type"), "articles", ["article_type"], unique=False
    )
    op.create_index(
        op.f("ix_articles_canonical_status"),
        "articles",
        ["canonical_status"],
        unique=False,
    )
    op.create_index(
        op.f("ix_articles_category"), "articles", ["category"], unique=False
    )
    op.create_index(
        op.f("ix_articles_created_by_user_id"),
        "articles",
        ["created_by_user_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_articles_difficulty_level"),
        "articles",
        ["difficulty_level"],
        unique=False,
    )
    op.create_index(
        op.f("ix_articles_historical_period"),
        "articles",
        ["historical_period"],
        unique=False,
    )
    op.create_index(
        op.f("ix_articles_is_public"), "articles", ["is_public"], unique=False
    )
    op.create_index(
        op.f("ix_articles_is_published"), "articles", ["is_published"], unique=False
    )
    op.create_index(
        op.f("ix_articles_last_modified_by_user_id"),
        "articles",
        ["last_modified_by_user_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_articles_primary_character_id"),
        "articles",
        ["primary_character_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_articles_primary_faction_id"),
        "articles",
        ["primary_faction_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_articles_primary_location_id"),
        "articles",
        ["primary_location_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_articles_primary_race_id"),
        "articles",
        ["primary_race_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_articles_source_type"), "articles", ["source_type"], unique=False
    )
    op.create_index(op.f("ix_articles_status"), "articles", ["status"], unique=False)
    op.create_index(op.f("ix_articles_title"), "articles", ["title"], unique=False)
    op.create_index(
        op.f("ix_articles_visibility_level"),
        "articles",
        ["visibility_level"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_articles_visibility_level"), table_name="articles")
    op.drop_index(op.f("ix_articles_title"), table_name="articles")
    op.drop_index(op.f("ix_articles_status"), table_name="articles")
    op.drop_index(op.f("ix_articles_source_type"), table_name="articles")
    op.drop_index(op.f("ix_articles_primary_race_id"), table_name="articles")
    op.drop_index(op.f("ix_articles_primary_location_id"), table_name="articles")
    op.drop_index(op.f("ix_articles_primary_faction_id"), table_name="articles")
    op.drop_index(op.f("ix_articles_primary_character_id"), table_name="articles")
    op.drop_index(op.f("ix_articles_last_modified_by_user_id"), table_name="articles")
    op.drop_index(op.f("ix_articles_is_published"), table_name="articles")
    op.drop_index(op.f("ix_articles_is_public"), table_name="articles")
    op.drop_index(op.f("ix_articles_historical_period"), table_name="articles")
    op.drop_index(op.f("ix_articles_difficulty_level"), table_name="articles")
    op.drop_index(op.f("ix_articles_created_by_user_id"), table_name="articles")
    op.drop_index(op.f("ix_articles_category"), table_name="articles")
    op.drop_index(op.f("ix_articles_canonical_status"), table_name="articles")
    op.drop_index(op.f("ix_articles_article_type"), table_name="articles")
    op.drop_index("idx_article_visibility", table_name="articles")
    op.drop_index("idx_article_type_status", table_name="articles")
    op.drop_index(
        "idx_article_title_trgm",
        table_name="articles",
        postgresql_using="gin",
        postgresql_ops={"title": "gin_trgm_ops"},
    )
    op.drop_index("idx_article_tags", table_name="articles", postgresql_using="gin")
    op.drop_index(
        "idx_article_summary_fts", table_name="articles", postgresql_using="gin"
    )
    op.drop_index("idx_article_sources", table_name="articles", postgresql_using="gin")
    op.drop_index(
        "idx_article_religious_context", table_name="articles", postgresql_using="gin"
    )
    op.drop_index(
        "idx_article_related_races", table_name="articles", postgresql_using="gin"
    )
    op.drop_index(
        "idx_article_related_locs", table_name="articles", postgresql_using="gin"
    )
    op.drop_index(
        "idx_article_related_factions", table_name="articles", postgresql_using="gin"
    )
    op.drop_index(
        "idx_article_related_chars", table_name="articles", postgresql_using="gin"
    )
    op.drop_index("idx_article_publication", table_name="articles")
    op.drop_index("idx_article_period", table_name="articles")
    op.drop_index("idx_article_last_modified_by", table_name="articles")
    op.drop_index(
        "idx_article_languages", table_name="articles", postgresql_using="gin"
    )
    op.drop_index(
        "idx_article_cultural_context", table_name="articles", postgresql_using="gin"
    )
    op.drop_index("idx_article_created_by", table_name="articles")
    op.drop_index(
        "idx_article_content_fts", table_name="articles", postgresql_using="gin"
    )
    op.drop_index("idx_article_category_published", table_name="articles")
    op.drop_table("articles")
    op.drop_index(op.f("ix_locations_wealth_level"), table_name="locations")
    op.drop_index(op.f("ix_locations_type"), table_name="locations")
    op.drop_index(op.f("ix_locations_strategic_importance"), table_name="locations")
    op.drop_index(op.f("ix_locations_region"), table_name="locations")
    op.drop_index(op.f("ix_locations_population"), table_name="locations")
    op.drop_index(op.f("ix_locations_parent_location_id"), table_name="locations")
    op.drop_index(op.f("ix_locations_name"), table_name="locations")
    op.drop_index(op.f("ix_locations_map_y"), table_name="locations")
    op.drop_index(op.f("ix_locations_map_x"), table_name="locations")
    op.drop_index(op.f("ix_locations_government_type"), table_name="locations")
    op.drop_index(op.f("ix_locations_founded_year"), table_name="locations")
    op.drop_index(op.f("ix_locations_fortification_level"), table_name="locations")
    op.drop_index(op.f("ix_locations_danger_level"), table_name="locations")
    op.drop_index(op.f("ix_locations_current_status"), table_name="locations")
    op.drop_index(op.f("ix_locations_current_ruler_name"), table_name="locations")
    op.drop_index(op.f("ix_locations_created_by_user_id"), table_name="locations")
    op.drop_index(op.f("ix_locations_controlling_faction_name"), table_name="locations")
    op.drop_index(op.f("ix_locations_climate"), table_name="locations")
    op.drop_index("idx_location_wealth_population", table_name="locations")
    op.drop_index("idx_location_type_region", table_name="locations")
    op.drop_index(
        "idx_location_trade_goods", table_name="locations", postgresql_using="gin"
    )
    op.drop_index("idx_location_strategic_military", table_name="locations")
    op.drop_index("idx_location_routes", table_name="locations", postgresql_using="gin")
    op.drop_index(
        "idx_location_resources", table_name="locations", postgresql_using="gin"
    )
    op.drop_index(
        "idx_location_name_trgm",
        table_name="locations",
        postgresql_using="gin",
        postgresql_ops={"name": "gin_trgm_ops"},
    )
    op.drop_index(
        "idx_location_languages", table_name="locations", postgresql_using="gin"
    )
    op.drop_index(
        "idx_location_landmarks", table_name="locations", postgresql_using="gin"
    )
    op.drop_index("idx_location_events", table_name="locations", postgresql_using="gin")
    op.drop_index(
        "idx_location_description_fts", table_name="locations", postgresql_using="gin"
    )
    op.drop_index("idx_location_coordinates", table_name="locations")
    op.drop_table("locations")
    op.drop_index(op.f("ix_factions_wealth_level"), table_name="factions")
    op.drop_index(op.f("ix_factions_type"), table_name="factions")
    op.drop_index(op.f("ix_factions_status"), table_name="factions")
    op.drop_index(op.f("ix_factions_primary_territory"), table_name="factions")
    op.drop_index(op.f("ix_factions_political_influence"), table_name="factions")
    op.drop_index(op.f("ix_factions_parent_faction_id"), table_name="factions")
    op.drop_index(op.f("ix_factions_name"), table_name="factions")
    op.drop_index(op.f("ix_factions_military_strength"), table_name="factions")
    op.drop_index(op.f("ix_factions_leadership_type"), table_name="factions")
    op.drop_index(op.f("ix_factions_historical_importance"), table_name="factions")
    op.drop_index(op.f("ix_factions_full_name"), table_name="factions")
    op.drop_index(op.f("ix_factions_founded_year"), table_name="factions")
    op.drop_index(op.f("ix_factions_economic_power"), table_name="factions")
    op.drop_index(op.f("ix_factions_current_leader_name"), table_name="factions")
    op.drop_index(op.f("ix_factions_created_by_user_id"), table_name="factions")
    op.drop_index("idx_faction_type_status", table_name="factions")
    op.drop_index(
        "idx_faction_trade_spec", table_name="factions", postgresql_using="gin"
    )
    op.drop_index(
        "idx_faction_trade_routes", table_name="factions", postgresql_using="gin"
    )
    op.drop_index("idx_faction_territorial", table_name="factions")
    op.drop_index(
        "idx_faction_structure", table_name="factions", postgresql_using="gin"
    )
    op.drop_index("idx_faction_regions", table_name="factions", postgresql_using="gin")
    op.drop_index("idx_faction_power_analysis", table_name="factions")
    op.drop_index(
        "idx_faction_name_trgm",
        table_name="factions",
        postgresql_using="gin",
        postgresql_ops={"name": "gin_trgm_ops"},
    )
    op.drop_index(
        "idx_faction_military_assets", table_name="factions", postgresql_using="gin"
    )
    op.drop_index(
        "idx_faction_income_sources", table_name="factions", postgresql_using="gin"
    )
    op.drop_index("idx_faction_historical", table_name="factions")
    op.drop_index("idx_faction_hierarchy", table_name="factions")
    op.drop_index("idx_faction_enemies", table_name="factions", postgresql_using="gin")
    op.drop_index(
        "idx_faction_economic_assets", table_name="factions", postgresql_using="gin"
    )
    op.drop_index(
        "idx_faction_diplomacy", table_name="factions", postgresql_using="gin"
    )
    op.drop_index(
        "idx_faction_description_fts", table_name="factions", postgresql_using="gin"
    )
    op.drop_index(
        "idx_faction_current_enemies", table_name="factions", postgresql_using="gin"
    )
    op.drop_index(
        "idx_faction_current_allies", table_name="factions", postgresql_using="gin"
    )
    op.drop_index(
        "idx_faction_conflicts", table_name="factions", postgresql_using="gin"
    )
    op.drop_index("idx_faction_cities", table_name="factions", postgresql_using="gin")
    op.drop_index("idx_faction_allies", table_name="factions", postgresql_using="gin")
    op.drop_index(
        "idx_faction_achievements", table_name="factions", postgresql_using="gin"
    )
    op.drop_table("factions")
    op.drop_index(op.f("ix_characters_wealth_level"), table_name="characters")
    op.drop_index(op.f("ix_characters_type"), table_name="characters")
    op.drop_index(op.f("ix_characters_status"), table_name="characters")
    op.drop_index(op.f("ix_characters_social_rank"), table_name="characters")
    op.drop_index(op.f("ix_characters_race_id"), table_name="characters")
    op.drop_index(op.f("ix_characters_primary_faction_name"), table_name="characters")
    op.drop_index(op.f("ix_characters_player_user_id"), table_name="characters")
    op.drop_index(op.f("ix_characters_player_id"), table_name="characters")
    op.drop_index(op.f("ix_characters_name"), table_name="characters")
    op.drop_index(op.f("ix_characters_mother_name"), table_name="characters")
    op.drop_index(op.f("ix_characters_full_name"), table_name="characters")
    op.drop_index(op.f("ix_characters_father_name"), table_name="characters")
    op.drop_index(op.f("ix_characters_death_year"), table_name="characters")
    op.drop_index(op.f("ix_characters_current_location_name"), table_name="characters")
    op.drop_index(op.f("ix_characters_created_by_user_id"), table_name="characters")
    op.drop_index(op.f("ix_characters_campaign_id"), table_name="characters")
    op.drop_index(op.f("ix_characters_birth_year"), table_name="characters")
    op.drop_index(op.f("ix_characters_birth_location_name"), table_name="characters")
    op.drop_index("idx_character_type_status", table_name="characters")
    op.drop_index(
        "idx_character_secondary_factions",
        table_name="characters",
        postgresql_using="gin",
    )
    op.drop_index("idx_character_player_user", table_name="characters")
    op.drop_index(
        "idx_character_name_trgm",
        table_name="characters",
        postgresql_using="gin",
        postgresql_ops={"name": "gin_trgm_ops"},
    )
    op.drop_index(
        "idx_character_faction_roles", table_name="characters", postgresql_using="gin"
    )
    op.drop_index("idx_character_created_by", table_name="characters")
    op.drop_table("characters")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_races_size"), table_name="races")
    op.drop_index(op.f("ix_races_rarity"), table_name="races")
    op.drop_index(op.f("ix_races_name"), table_name="races")
    op.drop_index(op.f("ix_races_is_playable"), table_name="races")
    op.drop_index("idx_race_stat_bonuses", table_name="races", postgresql_using="gin")
    op.drop_index("idx_race_regions", table_name="races", postgresql_using="gin")
    op.drop_index("idx_race_playable_size", table_name="races")
    op.drop_index(
        "idx_race_name_trgm",
        table_name="races",
        postgresql_using="gin",
        postgresql_ops={"name": "gin_trgm_ops"},
    )
    op.drop_index("idx_race_languages", table_name="races", postgresql_using="gin")
    op.drop_index("idx_race_abilities", table_name="races", postgresql_using="gin")
    op.drop_table("races")
    # ### end Alembic commands ###
