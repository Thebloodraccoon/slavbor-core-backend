"""add new tablesd

Revision ID: 5fd1788d0331
Revises: dba07ba91bdc
Create Date: 2025-07-04 09:21:22.226467

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "5fd1788d0331"
down_revision: Union[str, None] = "dba07ba91bdc"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "abilities",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("category", sa.String(length=30), nullable=False),
        sa.Column("usage_type", sa.String(length=20), nullable=True),
        sa.Column("resource_cost", sa.Integer(), nullable=True),
        sa.Column("resource_type", sa.String(length=20), nullable=True),
        sa.Column("duration", sa.String(length=50), nullable=True),
        sa.Column("recharge", sa.String(length=20), nullable=True),
        sa.Column("attack_type", sa.String(length=20), nullable=True),
        sa.Column("damage_dice", sa.String(length=20), nullable=True),
        sa.Column("damage_type", sa.String(length=20), nullable=True),
        sa.Column("save_required", sa.String(length=20), nullable=True),
        sa.Column("save_dc", sa.Integer(), nullable=True),
        sa.Column("strength_modifier", sa.Integer(), nullable=True),
        sa.Column("dexterity_modifier", sa.Integer(), nullable=True),
        sa.Column("constitution_modifier", sa.Integer(), nullable=True),
        sa.Column("intelligence_modifier", sa.Integer(), nullable=True),
        sa.Column("wisdom_modifier", sa.Integer(), nullable=True),
        sa.Column("charisma_modifier", sa.Integer(), nullable=True),
        sa.Column("resistances_text", sa.Text(), nullable=True),
        sa.Column("special_effects_text", sa.Text(), nullable=True),
        sa.Column("level_requirement", sa.Integer(), nullable=True),
        sa.Column("class_requirement_id", sa.Integer(), nullable=True),
        sa.Column("race_requirement_id", sa.Integer(), nullable=True),
        sa.Column("other_requirements", sa.Text(), nullable=True),
        sa.Column("is_magical", sa.Boolean(), nullable=True),
        sa.Column("is_attack", sa.Boolean(), nullable=True),
        sa.Column("is_spell", sa.Boolean(), nullable=True),
        sa.Column("is_concentration", sa.Boolean(), nullable=True),
        sa.Column("is_ritual", sa.Boolean(), nullable=True),
        sa.Column("is_homebrew", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.CheckConstraint(
            "category IN ('racial', 'class', 'spell', 'feat', 'item', 'condition', 'custom')",
            name="check_ability_category",
        ),
        sa.CheckConstraint(
            "charisma_modifier IS NULL OR (charisma_modifier >= -10 AND charisma_modifier <= 10)",
            name="check_charisma_modifier_range",
        ),
        sa.CheckConstraint(
            "constitution_modifier IS NULL OR (constitution_modifier >= -10 AND constitution_modifier <= 10)",
            name="check_constitution_modifier_range",
        ),
        sa.CheckConstraint(
            "dexterity_modifier IS NULL OR (dexterity_modifier >= -10 AND dexterity_modifier <= 10)",
            name="check_dexterity_modifier_range",
        ),
        sa.CheckConstraint(
            "intelligence_modifier IS NULL OR (intelligence_modifier >= -10 AND intelligence_modifier <= 10)",
            name="check_intelligence_modifier_range",
        ),
        sa.CheckConstraint(
            "level_requirement IS NULL OR (level_requirement >= 1 AND level_requirement <= 20)",
            name="check_level_requirement_range",
        ),
        sa.CheckConstraint(
            "resource_cost IS NULL OR resource_cost >= 0",
            name="check_resource_cost_positive",
        ),
        sa.CheckConstraint(
            "save_dc IS NULL OR save_dc > 0", name="check_save_dc_positive"
        ),
        sa.CheckConstraint(
            "strength_modifier IS NULL OR (strength_modifier >= -10 AND strength_modifier <= 10)",
            name="check_strength_modifier_range",
        ),
        sa.CheckConstraint(
            "wisdom_modifier IS NULL OR (wisdom_modifier >= -10 AND wisdom_modifier <= 10)",
            name="check_wisdom_modifier_range",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_ability_category", "abilities", ["category"], unique=False)
    op.create_index(
        "idx_ability_class_requirement",
        "abilities",
        ["class_requirement_id"],
        unique=False,
    )
    op.create_index(
        "idx_ability_description_fts",
        "abilities",
        ["description"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_ability_level_requirement",
        "abilities",
        ["level_requirement"],
        unique=False,
    )
    op.create_index(
        "idx_ability_name_trgm",
        "abilities",
        ["name"],
        unique=False,
        postgresql_using="gin",
        postgresql_ops={"name": "gin_trgm_ops"},
    )
    op.create_index(
        "idx_ability_race_requirement",
        "abilities",
        ["race_requirement_id"],
        unique=False,
    )
    op.create_index("idx_ability_usage_type", "abilities", ["usage_type"], unique=False)
    op.create_index(
        op.f("ix_abilities_category"), "abilities", ["category"], unique=False
    )
    op.create_index(op.f("ix_abilities_name"), "abilities", ["name"], unique=False)
    op.create_index(
        op.f("ix_abilities_usage_type"), "abilities", ["usage_type"], unique=False
    )
    op.create_table(
        "classes",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("type", sa.String(length=50), nullable=False),
        sa.Column("hit_dice", sa.String(length=10), nullable=True),
        sa.Column("primary_ability", sa.String(length=20), nullable=True),
        sa.Column("is_spellcaster", sa.Boolean(), nullable=True),
        sa.Column("is_playable", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.CheckConstraint(
            "type IN ('боец', 'маг', 'жрец', 'разбойник', 'следопыт', 'варвар', 'бард', 'паладин', 'колдун', 'друид')",
            name="check_class_type",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_class_name_trgm",
        "classes",
        ["name"],
        unique=False,
        postgresql_using="gin",
        postgresql_ops={"name": "gin_trgm_ops"},
    )
    op.create_index(
        op.f("ix_classes_is_playable"), "classes", ["is_playable"], unique=False
    )
    op.create_index(op.f("ix_classes_name"), "classes", ["name"], unique=True)
    op.create_index(op.f("ix_classes_type"), "classes", ["type"], unique=False)
    op.create_table(
        "entity_abilities",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("entity_type", sa.String(length=20), nullable=False),
        sa.Column("entity_id", sa.Integer(), nullable=False),
        sa.Column("ability_id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.CheckConstraint(
            "entity_type IN ('character', 'race', 'class', 'faction', 'location', 'item')",
            name="check_entity_type",
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "entity_type", "entity_id", "ability_id", name="uq_entity_ability"
        ),
    )
    op.create_index(
        "idx_entity_ability_ability", "entity_abilities", ["ability_id"], unique=False
    )
    op.create_index(
        "idx_entity_ability_entity",
        "entity_abilities",
        ["entity_type", "entity_id"],
        unique=False,
    )
    op.create_index(
        "idx_entity_ability_type", "entity_abilities", ["entity_type"], unique=False
    )
    op.create_index(
        op.f("ix_entity_abilities_ability_id"),
        "entity_abilities",
        ["ability_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_entity_abilities_entity_id"),
        "entity_abilities",
        ["entity_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_entity_abilities_entity_type"),
        "entity_abilities",
        ["entity_type"],
        unique=False,
    )
    op.create_table(
        "article_tags",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("article_id", sa.Integer(), nullable=False),
        sa.Column("tag", sa.String(length=50), nullable=False),
        sa.ForeignKeyConstraint(["article_id"], ["articles.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("article_id", "tag", name="uq_article_tag"),
    )
    op.create_index(
        "idx_article_tags_article", "article_tags", ["article_id"], unique=False
    )
    op.create_index("idx_article_tags_tag", "article_tags", ["tag"], unique=False)
    op.add_column(
        "character_game_stats", sa.Column("class_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "character_game_stats", sa.Column("subclass_id", sa.Integer(), nullable=True)
    )
    op.create_foreign_key(
        None,
        "character_game_stats",
        "classes",
        ["subclass_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        None,
        "character_game_stats",
        "classes",
        ["class_id"],
        ["id"],
        ondelete="SET NULL",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "character_game_stats", type_="foreignkey")
    op.drop_constraint(None, "character_game_stats", type_="foreignkey")
    op.drop_column("character_game_stats", "subclass_id")
    op.drop_column("character_game_stats", "class_id")
    op.drop_index("idx_article_tags_tag", table_name="article_tags")
    op.drop_index("idx_article_tags_article", table_name="article_tags")
    op.drop_table("article_tags")
    op.drop_index(
        op.f("ix_entity_abilities_entity_type"), table_name="entity_abilities"
    )
    op.drop_index(op.f("ix_entity_abilities_entity_id"), table_name="entity_abilities")
    op.drop_index(op.f("ix_entity_abilities_ability_id"), table_name="entity_abilities")
    op.drop_index("idx_entity_ability_type", table_name="entity_abilities")
    op.drop_index("idx_entity_ability_entity", table_name="entity_abilities")
    op.drop_index("idx_entity_ability_ability", table_name="entity_abilities")
    op.drop_table("entity_abilities")
    op.drop_index(op.f("ix_classes_type"), table_name="classes")
    op.drop_index(op.f("ix_classes_name"), table_name="classes")
    op.drop_index(op.f("ix_classes_is_playable"), table_name="classes")
    op.drop_index(
        "idx_class_name_trgm",
        table_name="classes",
        postgresql_using="gin",
        postgresql_ops={"name": "gin_trgm_ops"},
    )
    op.drop_table("classes")
    op.drop_index(op.f("ix_abilities_usage_type"), table_name="abilities")
    op.drop_index(op.f("ix_abilities_name"), table_name="abilities")
    op.drop_index(op.f("ix_abilities_category"), table_name="abilities")
    op.drop_index("idx_ability_usage_type", table_name="abilities")
    op.drop_index("idx_ability_race_requirement", table_name="abilities")
    op.drop_index(
        "idx_ability_name_trgm",
        table_name="abilities",
        postgresql_using="gin",
        postgresql_ops={"name": "gin_trgm_ops"},
    )
    op.drop_index("idx_ability_level_requirement", table_name="abilities")
    op.drop_index(
        "idx_ability_description_fts", table_name="abilities", postgresql_using="gin"
    )
    op.drop_index("idx_ability_class_requirement", table_name="abilities")
    op.drop_index("idx_ability_category", table_name="abilities")
    op.drop_table("abilities")
    # ### end Alembic commands ###
