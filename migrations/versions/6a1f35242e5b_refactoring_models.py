"""refactoring models

Revision ID: 6a1f35242e5b
Revises: d0b85052499a
Create Date: 2025-06-20 12:17:40.018007

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "6a1f35242e5b"
down_revision: Union[str, None] = "d0b85052499a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_faction_structure", "faction_culture")

    op.create_table(
        "character_game_stats",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("character_id", sa.Integer(), nullable=False),
        sa.Column("level", sa.Integer(), nullable=True),
        sa.Column("experience_points", sa.Integer(), nullable=True),
        sa.Column("strength", sa.Integer(), nullable=True),
        sa.Column("dexterity", sa.Integer(), nullable=True),
        sa.Column("constitution", sa.Integer(), nullable=True),
        sa.Column("intelligence", sa.Integer(), nullable=True),
        sa.Column("wisdom", sa.Integer(), nullable=True),
        sa.Column("charisma", sa.Integer(), nullable=True),
        sa.Column("armor_class", sa.Integer(), nullable=True),
        sa.Column("hit_points_max", sa.Integer(), nullable=True),
        sa.Column("hit_points_current", sa.Integer(), nullable=True),
        sa.Column("hit_dice", sa.String(length=20), nullable=True),
        sa.Column("proficiency_bonus", sa.Integer(), nullable=True),
        sa.Column("proficient_skills", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("proficient_saves", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("character_class", sa.String(length=50), nullable=True),
        sa.Column("character_subclass", sa.String(length=50), nullable=True),
        sa.Column("background", sa.String(length=50), nullable=True),
        sa.Column("alignment", sa.String(length=20), nullable=True),
        sa.Column("languages", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("tool_proficiencies", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("weapon_proficiencies", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("armor_proficiencies", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("spellcasting_ability", sa.String(length=20), nullable=True),
        sa.Column("spell_save_dc", sa.Integer(), nullable=True),
        sa.Column("spell_attack_bonus", sa.Integer(), nullable=True),
        sa.Column("spell_slots", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("spells_known", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.CheckConstraint("armor_class IS NULL OR armor_class > 0", name="check_ac_positive"),
        sa.CheckConstraint(
            "charisma IS NULL OR (charisma >= 1 AND charisma <= 30)",
            name="check_charisma_range",
        ),
        sa.CheckConstraint(
            "constitution IS NULL OR (constitution >= 1 AND constitution <= 30)",
            name="check_constitution_range",
        ),
        sa.CheckConstraint(
            "dexterity IS NULL OR (dexterity >= 1 AND dexterity <= 30)",
            name="check_dexterity_range",
        ),
        sa.CheckConstraint(
            "experience_points IS NULL OR experience_points >= 0",
            name="check_exp_positive",
        ),
        sa.CheckConstraint(
            "hit_points_current IS NULL OR hit_points_current >= 0",
            name="check_hp_current_nonnegative",
        ),
        sa.CheckConstraint("hit_points_max IS NULL OR hit_points_max > 0", name="check_hp_max_positive"),
        sa.CheckConstraint(
            "intelligence IS NULL OR (intelligence >= 1 AND intelligence <= 30)",
            name="check_intelligence_range",
        ),
        sa.CheckConstraint("level IS NULL OR (level >= 1 AND level <= 20)", name="check_level_range"),
        sa.CheckConstraint(
            "strength IS NULL OR (strength >= 1 AND strength <= 30)",
            name="check_strength_range",
        ),
        sa.CheckConstraint(
            "wisdom IS NULL OR (wisdom >= 1 AND wisdom <= 30)",
            name="check_wisdom_range",
        ),
        sa.ForeignKeyConstraint(
            ["character_id"],
            ["characters.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_game_stats_abilities",
        "character_game_stats",
        ["strength", "dexterity", "constitution"],
        unique=False,
    )
    op.create_index(
        "idx_game_stats_level_class",
        "character_game_stats",
        ["level", "character_class"],
        unique=False,
    )
    op.create_index(
        "idx_game_stats_skills",
        "character_game_stats",
        ["proficient_skills"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_game_stats_spells",
        "character_game_stats",
        ["spells_known"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_character_game_stats_character_id"),
        "character_game_stats",
        ["character_id"],
        unique=True,
    )
    op.create_table(
        "faction_culture",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("faction_id", sa.Integer(), nullable=False),
        sa.Column("dominant_culture", sa.String(length=50), nullable=True),
        sa.Column("primary_religion", sa.String(length=50), nullable=True),
        sa.Column("cultural_practices", sa.Text(), nullable=True),
        sa.Column("symbols_and_heraldry", sa.Text(), nullable=True),
        sa.Column("internal_structure", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("key_positions", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("membership_requirements", sa.Text(), nullable=True),
        sa.Column("internal_politics", sa.Text(), nullable=True),
        sa.Column("current_goals", sa.Text(), nullable=True),
        sa.Column("current_conflicts", sa.Text(), nullable=True),
        sa.Column("current_projects", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["faction_id"],
            ["factions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_faction_culture_religion",
        "faction_culture",
        ["dominant_culture", "primary_religion"],
        unique=False,
    )
    op.create_index(
        "idx_faction_positions",
        "faction_culture",
        ["key_positions"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_faction_projects",
        "faction_culture",
        ["current_projects"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_faction_structure",
        "faction_culture",
        ["internal_structure"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_faction_culture_dominant_culture"),
        "faction_culture",
        ["dominant_culture"],
        unique=False,
    )
    op.create_index(
        op.f("ix_faction_culture_faction_id"),
        "faction_culture",
        ["faction_id"],
        unique=True,
    )
    op.create_index(
        op.f("ix_faction_culture_primary_religion"),
        "faction_culture",
        ["primary_religion"],
        unique=False,
    )
    op.drop_index(
        op.f("idx_article_cultural_context"),
        table_name="articles",
        postgresql_using="gin",
    )
    op.drop_index(op.f("idx_article_languages"), table_name="articles", postgresql_using="gin")
    op.drop_index(op.f("idx_article_last_modified_by"), table_name="articles")
    op.drop_index(op.f("idx_article_period"), table_name="articles")
    op.drop_index(
        op.f("idx_article_religious_context"),
        table_name="articles",
        postgresql_using="gin",
    )
    op.drop_index(op.f("idx_article_sources"), table_name="articles", postgresql_using="gin")
    op.drop_index(op.f("idx_article_summary_fts"), table_name="articles", postgresql_using="gin")
    op.drop_index(op.f("idx_article_visibility"), table_name="articles")
    op.drop_index(op.f("ix_articles_difficulty_level"), table_name="articles")
    op.drop_index(op.f("ix_articles_is_public"), table_name="articles")
    op.drop_index(op.f("ix_articles_last_modified_by_user_id"), table_name="articles")
    op.drop_constraint(op.f("articles_last_modified_by_user_id_fkey"), "articles", type_="foreignkey")
    op.drop_column("articles", "languages_mentioned")
    op.drop_column("articles", "religious_context")
    op.drop_column("articles", "time_period_start")
    op.drop_column("articles", "time_period_end")
    op.drop_column("articles", "difficulty_level")
    op.drop_column("articles", "has_character_sheets")
    op.drop_column("articles", "subcategory")
    op.drop_column("articles", "cultural_context")
    op.drop_column("articles", "subtitle")
    op.drop_column("articles", "reliability_level")
    op.drop_column("articles", "geographic_scope")
    op.drop_column("articles", "is_public")
    op.drop_column("articles", "reading_time_minutes")
    op.drop_column("articles", "has_images")
    op.drop_column("articles", "has_maps")
    op.drop_column("articles", "source_documents")
    op.drop_column("articles", "word_count")
    op.drop_column("articles", "last_modified_by_user_id")
    op.drop_column("articles", "topic")
    op.drop_column("articles", "has_timelines")
    op.drop_column("articles", "in_world_date")
    op.drop_index(
        op.f("idx_character_faction_roles"),
        table_name="characters",
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("idx_character_secondary_factions"),
        table_name="characters",
        postgresql_using="gin",
    )
    op.drop_index(op.f("ix_characters_birth_location_name"), table_name="characters")
    op.drop_index(op.f("ix_characters_current_location_name"), table_name="characters")
    op.drop_index(op.f("ix_characters_father_name"), table_name="characters")
    op.drop_index(op.f("ix_characters_mother_name"), table_name="characters")
    op.drop_index(op.f("ix_characters_primary_faction_name"), table_name="characters")
    op.drop_index(op.f("ix_characters_wealth_level"), table_name="characters")
    op.drop_column("characters", "current_location_name")
    op.drop_column("characters", "faction_status")
    op.drop_column("characters", "faction_roles")
    op.drop_column("characters", "birth_location_name")
    op.drop_column("characters", "wealth_level")
    op.drop_column("characters", "primary_faction_name")
    op.drop_column("characters", "mother_name")
    op.drop_column("characters", "secondary_factions")
    op.drop_column("characters", "father_name")
    op.drop_index(op.f("idx_faction_achievements"), table_name="factions", postgresql_using="gin")
    op.drop_index(op.f("idx_faction_allies"), table_name="factions", postgresql_using="gin")
    op.drop_index(op.f("idx_faction_cities"), table_name="factions", postgresql_using="gin")
    op.drop_index(op.f("idx_faction_conflicts"), table_name="factions", postgresql_using="gin")
    op.drop_index(
        op.f("idx_faction_current_allies"),
        table_name="factions",
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("idx_faction_current_enemies"),
        table_name="factions",
        postgresql_using="gin",
    )
    op.drop_index(op.f("idx_faction_diplomacy"), table_name="factions", postgresql_using="gin")
    op.drop_index(
        op.f("idx_faction_economic_assets"),
        table_name="factions",
        postgresql_using="gin",
    )
    op.drop_index(op.f("idx_faction_enemies"), table_name="factions", postgresql_using="gin")
    op.drop_index(op.f("idx_faction_historical"), table_name="factions")
    op.drop_index(
        op.f("idx_faction_income_sources"),
        table_name="factions",
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("idx_faction_military_assets"),
        table_name="factions",
        postgresql_using="gin",
    )
    op.drop_index(op.f("idx_faction_power_analysis"), table_name="factions")
    op.drop_index(op.f("idx_faction_regions"), table_name="factions", postgresql_using="gin")
    op.drop_index(op.f("idx_faction_structure"), table_name="factions", postgresql_using="gin")
    op.drop_index(op.f("idx_faction_territorial"), table_name="factions")
    op.drop_index(op.f("idx_faction_trade_routes"), table_name="factions", postgresql_using="gin")
    op.drop_index(op.f("idx_faction_trade_spec"), table_name="factions", postgresql_using="gin")
    op.drop_index(op.f("ix_factions_economic_power"), table_name="factions")
    op.drop_index(op.f("ix_factions_historical_importance"), table_name="factions")
    op.drop_index(op.f("ix_factions_military_strength"), table_name="factions")
    op.drop_index(op.f("ix_factions_political_influence"), table_name="factions")
    op.drop_index(op.f("ix_factions_primary_territory"), table_name="factions")
    op.drop_index(op.f("ix_factions_wealth_level"), table_name="factions")
    op.create_index(
        "idx_faction_alternative_names",
        "factions",
        ["alternative_names"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_faction_leader",
        "factions",
        ["current_leader_name", "leadership_type"],
        unique=False,
    )
    op.drop_column("factions", "military_strength")
    op.drop_column("factions", "primary_religion")
    op.drop_column("factions", "controlled_regions")
    op.drop_column("factions", "symbols_and_heraldry")
    op.drop_column("factions", "primary_territory")
    op.drop_column("factions", "succession_rules")
    op.drop_column("factions", "dynastic_title")
    op.drop_column("factions", "cultural_contributions")
    op.drop_column("factions", "controlled_cities")
    op.drop_column("factions", "diplomatic_status")
    op.drop_column("factions", "historical_events")
    op.drop_column("factions", "current_conflicts")
    op.drop_column("factions", "key_positions")
    op.drop_column("factions", "trade_routes_controlled")
    op.drop_column("factions", "historical_importance")
    op.drop_column("factions", "major_conflicts")
    op.drop_column("factions", "economic_assets")
    op.drop_column("factions", "cultural_practices")
    op.drop_column("factions", "architectural_legacy")
    op.drop_column("factions", "source_material")
    op.drop_column("factions", "legal_legacy")
    op.drop_column("factions", "economic_power")
    op.drop_column("factions", "internal_structure")
    op.drop_column("factions", "government_structure")
    op.drop_column("factions", "current_goals")
    op.drop_column("factions", "major_achievements")
    op.drop_column("factions", "political_influence")
    op.drop_column("factions", "trade_specialization")
    op.drop_column("factions", "territorial_control")
    op.drop_column("factions", "traditional_enemies")
    op.drop_column("factions", "military_specialization")
    op.drop_column("factions", "military_assets")
    op.drop_column("factions", "internal_politics")
    op.drop_column("factions", "current_enemies")
    op.drop_column("factions", "decline_started_year")
    op.drop_column("factions", "traditional_allies")
    op.drop_column("factions", "peak_power_period")
    op.drop_column("factions", "primary_income_sources")
    op.drop_column("factions", "membership_requirements")
    op.drop_column("factions", "dominant_culture")
    op.drop_column("factions", "current_projects")
    op.drop_column("factions", "wealth_level")
    op.drop_column("factions", "famous_military_units")
    op.drop_column("factions", "faction_branch")
    op.drop_column("factions", "current_allies")
    op.drop_index(op.f("idx_location_events"), table_name="locations", postgresql_using="gin")
    op.drop_index(op.f("idx_location_landmarks"), table_name="locations", postgresql_using="gin")
    op.drop_index(op.f("idx_location_languages"), table_name="locations", postgresql_using="gin")
    op.drop_index(op.f("idx_location_resources"), table_name="locations", postgresql_using="gin")
    op.drop_index(op.f("idx_location_routes"), table_name="locations", postgresql_using="gin")
    op.drop_index(op.f("idx_location_strategic_military"), table_name="locations")
    op.drop_index(op.f("idx_location_trade_goods"), table_name="locations", postgresql_using="gin")
    op.drop_index(op.f("idx_location_wealth_population"), table_name="locations")
    op.drop_index(op.f("ix_locations_controlling_faction_name"), table_name="locations")
    op.drop_index(op.f("ix_locations_current_ruler_name"), table_name="locations")
    op.drop_index(op.f("ix_locations_fortification_level"), table_name="locations")
    op.drop_index(op.f("ix_locations_founded_year"), table_name="locations")
    op.drop_index(op.f("ix_locations_government_type"), table_name="locations")
    op.drop_index(op.f("ix_locations_population"), table_name="locations")
    op.drop_index(op.f("ix_locations_strategic_importance"), table_name="locations")
    op.drop_index(op.f("ix_locations_wealth_level"), table_name="locations")
    op.create_index(
        "idx_location_alternative_names",
        "locations",
        ["alternative_names"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_location_status_danger",
        "locations",
        ["current_status", "danger_level"],
        unique=False,
    )
    op.drop_column("locations", "strategic_importance")
    op.drop_column("locations", "political_status")
    op.drop_column("locations", "main_trade_goods")
    op.drop_column("locations", "trade_routes")
    op.drop_column("locations", "controlling_faction_name")
    op.drop_column("locations", "fortification_level")
    op.drop_column("locations", "population")
    op.drop_column("locations", "garrison_size")
    op.drop_column("locations", "major_events")
    op.drop_column("locations", "connected_locations")
    op.drop_column("locations", "seasonal_changes")
    op.drop_column("locations", "religious_sites")
    op.drop_column("locations", "founded_year")
    op.drop_column("locations", "historical_periods")
    op.drop_column("locations", "notable_buildings")
    op.drop_column("locations", "infrastructure_level")
    op.drop_column("locations", "elevation")
    op.drop_column("locations", "accessible_by")
    op.drop_column("locations", "government_type")
    op.drop_column("locations", "population_composition")
    op.drop_column("locations", "notable_features")
    op.drop_column("locations", "languages_spoken")
    op.drop_column("locations", "current_ruler_name")
    op.drop_column("locations", "special_events")
    op.drop_column("locations", "cultural_landmarks")
    op.drop_column("locations", "habitability")
    op.drop_column("locations", "dominant_culture")
    op.drop_column("locations", "travel_restrictions")
    op.drop_column("locations", "natural_resources")
    op.drop_column("locations", "wealth_level")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "locations",
        sa.Column("wealth_level", sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    )
    op.add_column(
        "locations",
        sa.Column(
            "natural_resources",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "locations",
        sa.Column("travel_restrictions", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "locations",
        sa.Column(
            "dominant_culture",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "locations",
        sa.Column("habitability", sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    )
    op.add_column(
        "locations",
        sa.Column(
            "cultural_landmarks",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "locations",
        sa.Column(
            "special_events",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "locations",
        sa.Column(
            "current_ruler_name",
            sa.VARCHAR(length=200),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "locations",
        sa.Column(
            "languages_spoken",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "locations",
        sa.Column("notable_features", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "locations",
        sa.Column(
            "population_composition",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "locations",
        sa.Column("government_type", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    )
    op.add_column(
        "locations",
        sa.Column(
            "accessible_by",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "locations",
        sa.Column("elevation", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "locations",
        sa.Column(
            "infrastructure_level",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "locations",
        sa.Column(
            "notable_buildings",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "locations",
        sa.Column(
            "historical_periods",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "locations",
        sa.Column("founded_year", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "locations",
        sa.Column(
            "religious_sites",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "locations",
        sa.Column("seasonal_changes", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "locations",
        sa.Column(
            "connected_locations",
            postgresql.ARRAY(sa.INTEGER()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "locations",
        sa.Column(
            "major_events",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "locations",
        sa.Column("garrison_size", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "locations",
        sa.Column("population", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "locations",
        sa.Column(
            "fortification_level",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "locations",
        sa.Column(
            "controlling_faction_name",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "locations",
        sa.Column(
            "trade_routes",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "locations",
        sa.Column(
            "main_trade_goods",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "locations",
        sa.Column(
            "political_status",
            sa.VARCHAR(length=30),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "locations",
        sa.Column(
            "strategic_importance",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_index("idx_location_status_danger", table_name="locations")
    op.drop_index("idx_location_alternative_names", table_name="locations", postgresql_using="gin")
    op.create_index(op.f("ix_locations_wealth_level"), "locations", ["wealth_level"], unique=False)
    op.create_index(
        op.f("ix_locations_strategic_importance"),
        "locations",
        ["strategic_importance"],
        unique=False,
    )
    op.create_index(op.f("ix_locations_population"), "locations", ["population"], unique=False)
    op.create_index(
        op.f("ix_locations_government_type"),
        "locations",
        ["government_type"],
        unique=False,
    )
    op.create_index(op.f("ix_locations_founded_year"), "locations", ["founded_year"], unique=False)
    op.create_index(
        op.f("ix_locations_fortification_level"),
        "locations",
        ["fortification_level"],
        unique=False,
    )
    op.create_index(
        op.f("ix_locations_current_ruler_name"),
        "locations",
        ["current_ruler_name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_locations_controlling_faction_name"),
        "locations",
        ["controlling_faction_name"],
        unique=False,
    )
    op.create_index(
        op.f("idx_location_wealth_population"),
        "locations",
        ["wealth_level", "population"],
        unique=False,
    )
    op.create_index(
        op.f("idx_location_trade_goods"),
        "locations",
        ["main_trade_goods"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_location_strategic_military"),
        "locations",
        ["strategic_importance", "fortification_level"],
        unique=False,
    )
    op.create_index(
        op.f("idx_location_routes"),
        "locations",
        ["trade_routes"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_location_resources"),
        "locations",
        ["natural_resources"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_location_languages"),
        "locations",
        ["languages_spoken"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_location_landmarks"),
        "locations",
        ["cultural_landmarks"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_location_events"),
        "locations",
        ["major_events"],
        unique=False,
        postgresql_using="gin",
    )
    op.add_column(
        "factions",
        sa.Column(
            "current_allies",
            postgresql.ARRAY(sa.INTEGER()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column("faction_branch", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    )
    op.add_column(
        "factions",
        sa.Column(
            "famous_military_units",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column("wealth_level", sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    )
    op.add_column(
        "factions",
        sa.Column(
            "current_projects",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "dominant_culture",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column("membership_requirements", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "factions",
        sa.Column(
            "primary_income_sources",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "peak_power_period",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "traditional_allies",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column("decline_started_year", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "factions",
        sa.Column(
            "current_enemies",
            postgresql.ARRAY(sa.INTEGER()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column("internal_politics", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "factions",
        sa.Column(
            "military_assets",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "military_specialization",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "traditional_enemies",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "territorial_control",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "trade_specialization",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "political_influence",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "major_achievements",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column("current_goals", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "factions",
        sa.Column(
            "government_structure",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "internal_structure",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column("economic_power", sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    )
    op.add_column(
        "factions",
        sa.Column("legal_legacy", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "factions",
        sa.Column(
            "source_material",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "architectural_legacy",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column("cultural_practices", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "factions",
        sa.Column(
            "economic_assets",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "major_conflicts",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "historical_importance",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "trade_routes_controlled",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "key_positions",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column("current_conflicts", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "factions",
        sa.Column(
            "historical_events",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "diplomatic_status",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "controlled_cities",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "cultural_contributions",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column("dynastic_title", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    )
    op.add_column(
        "factions",
        sa.Column("succession_rules", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "factions",
        sa.Column(
            "primary_territory",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column("symbols_and_heraldry", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "factions",
        sa.Column(
            "controlled_regions",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "primary_religion",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "factions",
        sa.Column(
            "military_strength",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_index("idx_faction_leader", table_name="factions")
    op.drop_index("idx_faction_alternative_names", table_name="factions", postgresql_using="gin")
    op.create_index(op.f("ix_factions_wealth_level"), "factions", ["wealth_level"], unique=False)
    op.create_index(
        op.f("ix_factions_primary_territory"),
        "factions",
        ["primary_territory"],
        unique=False,
    )
    op.create_index(
        op.f("ix_factions_political_influence"),
        "factions",
        ["political_influence"],
        unique=False,
    )
    op.create_index(
        op.f("ix_factions_military_strength"),
        "factions",
        ["military_strength"],
        unique=False,
    )
    op.create_index(
        op.f("ix_factions_historical_importance"),
        "factions",
        ["historical_importance"],
        unique=False,
    )
    op.create_index(op.f("ix_factions_economic_power"), "factions", ["economic_power"], unique=False)
    op.create_index(
        op.f("idx_faction_trade_spec"),
        "factions",
        ["trade_specialization"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_faction_trade_routes"),
        "factions",
        ["trade_routes_controlled"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_faction_territorial"),
        "factions",
        ["primary_territory", "status"],
        unique=False,
    )
    op.create_index(
        op.f("idx_faction_structure"),
        "factions",
        ["internal_structure"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_faction_regions"),
        "factions",
        ["controlled_regions"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_faction_power_analysis"),
        "factions",
        ["military_strength", "economic_power", "political_influence"],
        unique=False,
    )
    op.create_index(
        op.f("idx_faction_military_assets"),
        "factions",
        ["military_assets"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_faction_income_sources"),
        "factions",
        ["primary_income_sources"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_faction_historical"),
        "factions",
        ["founded_year", "historical_importance"],
        unique=False,
    )
    op.create_index(
        op.f("idx_faction_enemies"),
        "factions",
        ["traditional_enemies"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_faction_economic_assets"),
        "factions",
        ["economic_assets"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_faction_diplomacy"),
        "factions",
        ["diplomatic_status"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_faction_current_enemies"),
        "factions",
        ["current_enemies"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_faction_current_allies"),
        "factions",
        ["current_allies"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_faction_conflicts"),
        "factions",
        ["major_conflicts"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_faction_cities"),
        "factions",
        ["controlled_cities"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_faction_allies"),
        "factions",
        ["traditional_allies"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_faction_achievements"),
        "factions",
        ["major_achievements"],
        unique=False,
        postgresql_using="gin",
    )
    op.add_column(
        "characters",
        sa.Column("father_name", sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    )
    op.add_column(
        "characters",
        sa.Column(
            "secondary_factions",
            postgresql.ARRAY(sa.INTEGER()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "characters",
        sa.Column("mother_name", sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    )
    op.add_column(
        "characters",
        sa.Column(
            "primary_faction_name",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "characters",
        sa.Column("wealth_level", sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    )
    op.add_column(
        "characters",
        sa.Column(
            "birth_location_name",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "characters",
        sa.Column(
            "faction_roles",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "characters",
        sa.Column("faction_status", sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    )
    op.add_column(
        "characters",
        sa.Column(
            "current_location_name",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.create_index(op.f("ix_characters_wealth_level"), "characters", ["wealth_level"], unique=False)
    op.create_index(
        op.f("ix_characters_primary_faction_name"),
        "characters",
        ["primary_faction_name"],
        unique=False,
    )
    op.create_index(op.f("ix_characters_mother_name"), "characters", ["mother_name"], unique=False)
    op.create_index(op.f("ix_characters_father_name"), "characters", ["father_name"], unique=False)
    op.create_index(
        op.f("ix_characters_current_location_name"),
        "characters",
        ["current_location_name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_characters_birth_location_name"),
        "characters",
        ["birth_location_name"],
        unique=False,
    )
    op.create_index(
        op.f("idx_character_secondary_factions"),
        "characters",
        ["secondary_factions"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_character_faction_roles"),
        "characters",
        ["faction_roles"],
        unique=False,
        postgresql_using="gin",
    )
    op.add_column(
        "articles",
        sa.Column("in_world_date", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    )
    op.add_column(
        "articles",
        sa.Column("has_timelines", sa.BOOLEAN(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "articles",
        sa.Column("topic", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    )
    op.add_column(
        "articles",
        sa.Column("last_modified_by_user_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "articles",
        sa.Column("word_count", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "articles",
        sa.Column(
            "source_documents",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "articles",
        sa.Column("has_maps", sa.BOOLEAN(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "articles",
        sa.Column("has_images", sa.BOOLEAN(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "articles",
        sa.Column("reading_time_minutes", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "articles",
        sa.Column("is_public", sa.BOOLEAN(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "articles",
        sa.Column(
            "geographic_scope",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "articles",
        sa.Column(
            "reliability_level",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "articles",
        sa.Column("subtitle", sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    )
    op.add_column(
        "articles",
        sa.Column(
            "cultural_context",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "articles",
        sa.Column("subcategory", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    )
    op.add_column(
        "articles",
        sa.Column("has_character_sheets", sa.BOOLEAN(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "articles",
        sa.Column(
            "difficulty_level",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "articles",
        sa.Column("time_period_end", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "articles",
        sa.Column("time_period_start", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "articles",
        sa.Column(
            "religious_context",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "articles",
        sa.Column(
            "languages_mentioned",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.create_foreign_key(
        op.f("articles_last_modified_by_user_id_fkey"),
        "articles",
        "users",
        ["last_modified_by_user_id"],
        ["id"],
    )
    op.create_index(
        op.f("ix_articles_last_modified_by_user_id"),
        "articles",
        ["last_modified_by_user_id"],
        unique=False,
    )
    op.create_index(op.f("ix_articles_is_public"), "articles", ["is_public"], unique=False)
    op.create_index(
        op.f("ix_articles_difficulty_level"),
        "articles",
        ["difficulty_level"],
        unique=False,
    )
    op.create_index(
        op.f("idx_article_visibility"),
        "articles",
        ["visibility_level", "is_public"],
        unique=False,
    )
    op.create_index(
        op.f("idx_article_summary_fts"),
        "articles",
        ["summary"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_article_sources"),
        "articles",
        ["source_documents"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_article_religious_context"),
        "articles",
        ["religious_context"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_article_period"),
        "articles",
        ["historical_period", "time_period_start", "time_period_end"],
        unique=False,
    )
    op.create_index(
        op.f("idx_article_last_modified_by"),
        "articles",
        ["last_modified_by_user_id", "updated_at"],
        unique=False,
    )
    op.create_index(
        op.f("idx_article_languages"),
        "articles",
        ["languages_mentioned"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("idx_article_cultural_context"),
        "articles",
        ["cultural_context"],
        unique=False,
        postgresql_using="gin",
    )
    op.drop_index(op.f("ix_faction_culture_primary_religion"), table_name="faction_culture")
    op.drop_index(op.f("ix_faction_culture_faction_id"), table_name="faction_culture")
    op.drop_index(op.f("ix_faction_culture_dominant_culture"), table_name="faction_culture")
    op.drop_index("idx_faction_structure", table_name="faction_culture", postgresql_using="gin")
    op.drop_index("idx_faction_projects", table_name="faction_culture", postgresql_using="gin")
    op.drop_index("idx_faction_positions", table_name="faction_culture", postgresql_using="gin")
    op.drop_index("idx_faction_culture_religion", table_name="faction_culture")
    op.drop_table("faction_culture")
    op.drop_index(op.f("ix_character_game_stats_character_id"), table_name="character_game_stats")
    op.drop_index(
        "idx_game_stats_spells",
        table_name="character_game_stats",
        postgresql_using="gin",
    )
    op.drop_index(
        "idx_game_stats_skills",
        table_name="character_game_stats",
        postgresql_using="gin",
    )
    op.drop_index("idx_game_stats_level_class", table_name="character_game_stats")
    op.drop_index("idx_game_stats_abilities", table_name="character_game_stats")
    op.drop_table("character_game_stats")
    # ### end Alembic commands ###
