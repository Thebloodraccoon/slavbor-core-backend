[tool.poetry]
name = "slavbor-core-backend"
version = "0.1.0"
description = "Slavbor World Backend API is a web application with a RESTful API backend"
authors = ["The Coon vsafirko@gmail.com", "Danylo", "Maksym"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "0.115.12"
uvicorn = {extras = ["standard"], version = "0.34.3"}
starlette = "0.46.2"
sqlalchemy = "2.0.41"
alembic = "1.16.1"
psycopg2-binary = "2.9.10"
httpx = "0.28.1"
httpcore = "1.0.9"
httptools = "0.6.4"
passlib = {extras = ["bcrypt"], version = "1.7.4"}
python-jose = {extras = ["cryptography"], version = "3.5.0"}
bcrypt = "4.0.1"
argon2-cffi = "25.1.0"
cryptography = "45.0.3"
pyotp = "2.9.0"
pydantic = "2.11.5"
pydantic-settings = "2.9.1"
annotated-types = "0.7.0"
python-dotenv = "1.1.0"
python-multipart = "0.0.20"
pyyaml = "6.0.2"
redis = "6.2.0"
async-timeout = "5.0.1"
anyio = "4.9.0"
click = "8.2.1"
certifi = "2025.6.15"
idna = "3.10"
six = "1.17.0"
sniffio = "1.3.1"
typing-extensions = "4.14.0"
greenlet = "3.2.3"
ruff = "^0.12.2"

[tool.poetry.group.dev.dependencies]
pytest = "8.4.0"
pytest-asyncio = "1.0.0"
pytest-cov = "6.1.1"
pytest-xdist = {extras = ["psutil"], version = "^3.5.0"}
pytest-sugar = "^1.0.0"
coverage = "7.8.2"
mypy = "1.16.0"
types-passlib = "1.7.7.20250602"
types-pyasn1 = "0.6.0.20250516"
types-python-jose = "3.5.0.20250531"
bandit = "^1.7.5"
tox = "4.26.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
target-version = "py310"
line-length = 120
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "app/settings",
    ".venv",
    ".tox",
    "migrations",
]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "PIE",   # flake8-pie
    "SIM",   # flake8-simplify
]

ignore = [
    "E501",
    "N805",
    "B008",
    "B904",
    "SIM102",
]

mccabe = { max-complexity = 10 }

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",
    "PLR2004",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["app"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
disallow_untyped_defs = false
check_untyped_defs = true
warn_return_any = false
warn_unused_configs = true
exclude = [
    "app/settings/",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]

[tool.pytest.ini_options]
minversion = "6.0"
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/__init__.py",
    "app/settings/*",
    "app/constants.py",
    "app/main.py",
    "tests/*",
]